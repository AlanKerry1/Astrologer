from functools import wraps
from aiogram import F
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
import keyboards
from config import GROUP_ID, CHANNEL_ID
from datetime import datetime, time #–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
import http_requests
from aiogram.enums import ChatMemberStatus
from aiogram.types import ChatMember

router = Router()


#–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
user_clicks = {}
def can_click(user_id):
    now = datetime.now()
    if user_id in user_clicks:
        last_click_time = user_clicks[user_id]
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ—á—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        midnight = datetime.combine(now.date(), time.min)

        if last_click_time >= midnight: #–µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–∂–∞—Ç–∏–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è
            return False
        else:
            return True
    else:
        return True
    

class TaroState(StatesGroup):
    name = State()
    quest = State()
    cards = State()

class SovmesState(StatesGroup):
    name = State()
    name2 = State()
    sign = State()
    sign2 = State()

class GoroskopState(StatesGroup):
    sign = State()


def get_date():
    current_date = datetime.now().strftime('%Y-%m-%d')
    return current_date


async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å. –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–µ 'left' –∏–ª–∏ 'kicked'.
        return member.status in (ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR, ChatMemberStatus.RESTRICTED)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return False  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False




@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = keyboards.get_main_keyboard()
    photo = FSInputFile("photos/cards.jpg")
    await message.answer_photo(caption="ü§¨ –≠–π, —Ç—ã, —á–µ–≥–æ –∑–∞—Å—Ç—ã–ª? –Ø ‚Äì –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π, –∏ —è –Ω–µ –ª—é–±–ª—é –∂–¥–∞—Ç—å!\n üò† –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –≥–æ—Ä—å–∫—É—é –ø—Ä–∞–≤–¥—É –æ —Å–µ–±–µ? –í—ã–±–∏—Ä–∞–π, –Ω–∞ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –æ—Ç–≤–∞–∂–∏—à—å—Å—è: –≥–æ—Ä–æ—Å–∫–æ–ø, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –∏–ª–∏ –¢–∞—Ä–æ? üòà", photo=photo, reply_markup=keyboard)


#–î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ü–û–î–ü–ò–°–û–ö
def check_subscription_decorator():
        def decorator(func):
            @wraps(func)
            async def wrapper(message: types.Message, *args, **kwargs):
                user_id = message.from_user.id
                is_subscribed = await check_subscription(message.bot, user_id)
                if is_subscribed:
                    return await func(message, *args, **kwargs)
                else:
                    keyboard = keyboards.get_subscribe_keyboard()
                    await message.answer(
                        "–°–ª—ã—à—å! üëÄ –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π –Ω–µ –¥–ª—è –≤—Å–µ—Ö! ü§´ –•–æ—á–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ? üîÆ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ‚Äì –ø–æ–ª—É—á–∏ VIP-–ø—Ä–æ–ø—É—Å–∫ –≤ –º–∏—Ä —Ç–∞–π–Ω! üóù –ò–Ω–∞—á–µ –±—É–¥–µ—à—å –≥–∞–¥–∞—Ç—å –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–π –≥—É—â–µ! ‚òïÔ∏è",
                        reply_markup=keyboard,
                    )

            return wrapper

        return decorator

#–î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ü–û–î–ü–ò–°–û–ö –ö–ê–õ–ë–ï–ö
def check_subscription_callback_decorator():
    def decorator(func):
        @wraps(func)
        async def wrapper(callback: types.CallbackQuery, *args, **kwargs):
            user_id = callback.from_user.id
            is_subscribed = await check_subscription(callback.message.bot, user_id)
            if is_subscribed:
                return await func(callback, *args, **kwargs)
            else:
                keyboard = keyboards.get_subscribe_keyboard()
                await callback.message.answer(
                    "–°–ª—ã—à—å! üëÄ –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π –Ω–µ –¥–ª—è –≤—Å–µ—Ö! ü§´ –•–æ—á–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ? üîÆ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ‚Äì –ø–æ–ª—É—á–∏ VIP-–ø—Ä–æ–ø—É—Å–∫ –≤ –º–∏—Ä —Ç–∞–π–Ω! üóù –ò–Ω–∞—á–µ –±—É–¥–µ—à—å –≥–∞–¥–∞—Ç—å –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–π –≥—É—â–µ! ‚òïÔ∏è",
                    reply_markup=keyboard,
                )
                await callback.answer()  # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

        return wrapper

    return decorator


#–û–¢–ú–ï–ù–ê
@router.callback_query(GoroskopState.sign, F.data.in_({"–û—Ç–º–µ–Ω–∞"}))
async def callback_cancel(callback: types.CallbackQuery, state: FSMContext, bot:Bot):
    await state.clear()
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id) 
    keyboard = keyboards.get_main_keyboard()
    await callback.message.answer("ü§¨ –≠–π, —Ç—ã, —á–µ–≥–æ –∑–∞—Å—Ç—ã–ª? –Ø ‚Äì –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π, –∏ —è –Ω–µ –ª—é–±–ª—é –∂–¥–∞—Ç—å!\n üò† –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –≥–æ—Ä—å–∫—É—é –ø—Ä–∞–≤–¥—É –æ —Å–µ–±–µ? –í—ã–±–∏—Ä–∞–π, –Ω–∞ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –æ—Ç–≤–∞–∂–∏—à—å—Å—è: –≥–æ—Ä–æ—Å–∫–æ–ø, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –∏–ª–∏ –¢–∞—Ä–æ? üòà", reply_markup=keyboard)

#–ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
@router.callback_query( F.data.in_({"–ø—Ä–æ–≤–µ—Ä–∫–∞"}))
async def callback_cancel(callback: types.CallbackQuery, state: FSMContext, bot:Bot):
    await state.clear()
    user_id = callback.from_user.id
    is_subscribed = await check_subscription(callback.message.bot, user_id)

    if is_subscribed:
        await callback.message.answer("–ê–≥–∞! üòé –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å ‚Äì —Ç—ã –≤ —Ç–µ–º–µ! üëç –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∞–≤–¥–µ? üòà –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –Ω–∞–≥–∞–¥–∞—Ç—å! üîÆ")
    else:
        keyboard = keyboards.get_subscribe_keyboard()
        await callback.message.answer("–≠, –Ω–µ—Ç! üôÖ‚Äç‚ôÇÔ∏è –î—É–º–∞–ª, –ø—Ä–æ—Å–∫–æ—á–∏—à—å? –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π –≤—Å—ë –≤–∏–¥–∏—Ç! üëÅÔ∏è –ù–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äì –Ω–µ—Ç –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! üö´ –ü–æ–¥–ø–∏—à–∏—Å—å, –∏ –±—É–¥–µ—Ç —Ç–µ–±–µ —Å—á–∞—Å—Ç—å–µ! ‚ú®", reply_markup=keyboard)
    await callback.answer()  # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = keyboards.get_main_keyboard()
    await message.answer("ü§¨ –≠–π, —Ç—ã, —á–µ–≥–æ –∑–∞—Å—Ç—ã–ª? –Ø ‚Äì –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π, –∏ —è –Ω–µ –ª—é–±–ª—é –∂–¥–∞—Ç—å!\n üò† –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –≥–æ—Ä—å–∫—É—é –ø—Ä–∞–≤–¥—É –æ —Å–µ–±–µ? –í—ã–±–∏—Ä–∞–π, –Ω–∞ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –æ—Ç–≤–∞–∂–∏—à—å—Å—è: –≥–æ—Ä–æ—Å–∫–æ–ø, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –∏–ª–∏ –¢–∞—Ä–æ? üòà", reply_markup=keyboard)

#–¢–ê–†–û
@router.message(F.text == "üÉè–¢–∞—Ä–æ")
@check_subscription_decorator()
async def start(message: types.Message, state: FSMContext):
    await state.set_state(TaroState.name)
    keyboard = keyboards.get_cancel_keyboard()
    await message.answer("üñ§ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë –±—É–¥—É—â–µ–µ, —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ?\n –ù—É, –ª–∞–¥–Ω–æ, –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π –ø–æ–º–æ–∂–µ—Ç. üîÆ –î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–µ–º –∏–º–µ—é –¥–µ–ª–æ. üòè", reply_markup=keyboard)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
@router.message(TaroState.name)
async def start(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(TaroState.quest)
    await message.answer("ü§® –¢–∞–∫, –∏–º—è –µ—Å—Ç—å. –¢–µ–ø–µ—Ä—å –∏–∑–ª–æ–∂–∏, —á—Ç–æ —É —Ç–µ–±—è —Ç–∞–º –∑–∞ –±–µ–¥–∞ –ø—Ä–∏–∫–ª—é—á–∏–ª–∞—Å—å? \nüôÑ –û–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é, –í–µ—â—É–Ω—É –ó–∞–ª—É–ø–Ω–æ–º—É –≤—Å—ë –º–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å. ü§´")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å/—Å–∏—Ç—É–∞—Ü–∏—é:")

@router.message(TaroState.quest)
async def start(message: types.Message, state: FSMContext):
    await state.update_data(quest=message.text)
    await state.set_state(TaroState.cards)
    keyboard = keyboards.get_taro_keyboard()
    await message.answer("ü§î –ê–≥–∞, —è—Å–Ω–æ-–ø–æ–Ω—è—Ç–Ω–æ. –¢–µ–ø–µ—Ä—å, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –¢–∞—Ä–æ —Ö–æ—á–µ—à—å –≤—ã—Ç—è–Ω—É—Ç—å? üîÆ", reply_markup=keyboard)

@router.callback_query(TaroState.cards, F.data.in_({"3_cards", "4_cards", "5_cards"}))
async def callback_taro(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "3_cards":
        await state.update_data(cards="3")
    elif callback.data == "4_cards":
        await state.update_data(cards="4")
    elif callback.data == "5_cards":
        await state.update_data(cards="5")

    await bot.send_message(chat_id=callback.message.chat.id, text="–í–µ—â—É–Ω –∫–æ–ª–¥—É–µ—Ç...") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    data = await state.get_data()

    await state.clear()
    keyboard = keyboards.get_main_keyboard()
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id) 
    bot_mes = await http_requests.getTaro(data["name"], data["quest"], data["cards"])
    await bot.send_message(chat_id=callback.message.chat.id, text=bot_mes, reply_markup=keyboard)
    await bot.send_message(
        chat_id=GROUP_ID,
        text=f'–Æ–∑: @{callback.from_user.username}\n –ó–∞–ø—Ä–æ—Å:–¢–ê–†–û \n –ò–º—è: {data["name"]}\n –ó–∞–ø—Ä–æ—Å: {data["quest"]}\n –ö–∞—Ä—Ç: {data["cards"]} \n \n {bot_mes}'
    )


#–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
@router.message(F.text == "üíò–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
@check_subscription_decorator()
async def sovm1(message: types.Message, state: FSMContext):
    await state.set_state(SovmesState.name)
    keyboard = keyboards.get_cancel_keyboard()
    await message.answer("üòà –ù—É —á—Ç–æ, –∫—Ä–∞—Å–∞–≤—á–∏–∫(—Ü–∞), —Ä–∞–∑ —Ä–µ—à–∏–ª(–∞) —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–¥—É, —Ç–æ –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ! \nü§™ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è, —á—Ç–æ–±—ã —è, –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π, –Ω–µ –ø—É—Ç–∞–ª—Å—è, –∫–æ–≥–¥–∞ –±—É–¥—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ —Ç–≤–æ—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. üñï", reply_markup=keyboard)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(SovmesState.name)
async def sovm2(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(SovmesState.name2)
    await message.answer("ü§¨ –û–∫–µ–π, —Ç–≤–æ—ë –∏–º—è —É –º–µ–Ω—è. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è —Ç–æ–≥–æ –±–µ–¥–æ–ª–∞–≥–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. \nüòà –ù—É, –¥–∞–≤–∞–π, –Ω–µ —Ç—É–ø–∏, –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π –∂–¥—ë—Ç! ‚è≥")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∏–º—è:")

@router.message(SovmesState.name2)
async def sovm3(message: types.Message, state: FSMContext):
    await state.update_data(name2=message.text)
    await state.set_state(SovmesState.sign)
    keyboard = keyboards.get_sign_keyboard()
    await message.answer(" –û—Ç–ª–∏—á–Ω–æ, —Å –∏–º–µ–Ω–∞–º–∏ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å, –∫–∞–∫–æ–π —Ç—ã —Ç–∞–º –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É? –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–∞–ª—å—à–µ –º—É–¥—Ä–∏—Ç—å. üëá", reply_markup=keyboard)

@router.callback_query(SovmesState.sign, F.data.in_({"–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã", "–°—Ç—Ä–µ–ª–µ—Ü"}))
async def callback_sovmes1(callback: types.CallbackQuery, state: FSMContext):
    sign = callback.data
    await state.update_data(sign=sign)
    await state.set_state(SovmesState.sign2)
    keyboard = keyboards.get_sign_keyboard()
    await callback.message.answer("–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –∫–∞–∫–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —É —Ç–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞? üòà –í—ã–±–∏—Ä–∞–π! –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ —Ä–∞—Å–∫—Ä—ã—Ç—å –≤—Å—é –ø—Ä–∞–≤–¥—É. üîÆ", reply_markup=keyboard)

@router.callback_query(SovmesState.sign2, F.data.in_({"–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã", "–°—Ç—Ä–µ–ª–µ—Ü"}))
async def callback_sovmes2(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    sign = callback.data
    await state.update_data(sign2=sign)
    await state.set_state(SovmesState.sign2)

    data = await state.get_data()
    await state.clear()
    await callback.answer()
    keyboard = keyboards.get_main_keyboard()
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–µ—â—É–Ω –∫–æ–ª–¥—É–µ—Ç...", reply_markup=keyboard) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    bot_mes = await http_requests.getCompatibility(data["name"], data["name2"], data["sign"], data["sign2"])
    await bot.send_message(chat_id=callback.message.chat.id, text=bot_mes, reply_markup=keyboard)
    await bot.send_message(
        chat_id=GROUP_ID,
        text=f'–Æ–∑: @{callback.from_user.username}\n –ó–∞–ø—Ä–æ—Å:–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ \n –ò–º—è: {data["name"]}\n –ò–º—è2: {data["name2"]}\n –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞1: {data["sign"]}\n –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞2: {data["sign2"]} \n \n {bot_mes}'
    )

#–ì–û–†–û–°–ö–û–ü
@router.message(F.text == "üîÆ–ì–æ—Ä–æ—Å–∫–æ–ø")
@check_subscription_decorator()
async def goroskop(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if can_click(user_id):
        user_clicks[user_id] = datetime.now()
        await state.set_state(GoroskopState.sign)
        keyboard = keyboards.get_sign_keyboard()
        await message.answer("üîÆ–î–∞–≤–∞–π, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞—á–æ–∫ —Å—Ä–µ–¥–∏ —ç—Ç–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. \n–í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –≤—ã–¥–∞—Ç—å —Å–∞–º—É—é –ø—Ä–∞–≤–¥–∏–≤—É—é (–∏ —Å–º–µ—à–Ω—É—é) –ø—Ä–µ–¥—Å–∫–∞–∑–∞—à–∫—É. ü§™", reply_markup=keyboard)
    else:
        await message.answer("üôÑ –ù—É –≤–æ—Ç, –æ–ø—è—Ç—å —Ç—ã! –Ø, üîÆ–í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π, –Ω–µ –ø–æ–ø–∫–∞-–¥—É—Ä–∞–∫ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ. \nüòí –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ —Ç–µ—Ä–ø–µ–Ω–∏—è —Ö–≤–∞—Ç–∏—Ç. ‚è≥")
    
@router.callback_query(GoroskopState.sign, F.data.in_({"–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã", "–°—Ç—Ä–µ–ª–µ—Ü"}))
async def callback_goroskop(callback: types.CallbackQuery, state: FSMContext, bot:Bot):
    sign = callback.data
    await state.update_data(sign=sign)
    data = await state.get_data()
    await state.clear()
    await callback.answer()
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id) 
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–µ—â—É–Ω –∫–æ–ª–¥—É–µ—Ç...") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    bot_mes = await http_requests.getHoroscope(data["sign"])
    await bot.send_message(chat_id=callback.message.chat.id, text=bot_mes)
    await bot.send_message(
        chat_id=GROUP_ID,
        text=f'–Æ–∑: @{callback.from_user.username}\n –ó–∞–ø—Ä–æ—Å:–ì–û–†–û–°–ö–û–ü \n –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {data["sign"]} \n –î–∞—Ç–∞: {get_date()} \n \n {bot_mes}'
        )







#–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ
@router.message()
async def unknown_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GoroskopState.sign:
          await message.answer("ü§® –≠—Ç–æ —á—Ç–æ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–µ? –¢—ã, —Å–ª—É—á–∞–µ–º, –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–ª –∫–Ω–æ–ø–∫–∏? üôÑ –Ø –ø—Ä–æ—Å–∏–ª –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, –∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ. –í—ã–±–∏—Ä–∞–π, –¥–∞–≤–∞–π!")
    else:
        await message.answer("üòà –ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –Ø, –í–µ—â—É–Ω –ó–∞–ª—É–ø–Ω—ã–π, –∂–¥—É —Ç–≤–æ–∏—Ö –≤–Ω—è—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∞ –Ω–µ —ç—Ç–æ–π –∞—Ö–∏–Ω–µ–∏. üñï –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start, –∏ —Ç–æ–≥–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º. üòí")

